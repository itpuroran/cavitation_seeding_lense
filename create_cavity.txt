# controlling read_dump

variable	T0 equal 0.7 			# fluid temperature

variable	r_0 equal 1   			# radius of the small cavity that is cut to place the repulsive particle

variable	R equal 4   			# radius of the spheres forming the lens
variable	h equal 1   			# height (thickness) of the lens divided by 2
variable	n equal 2   			# the number of repulsive particles on one side of the central 
variable    n_min equal 4*${n}+1  # total number of repulsive particles

variable	epsilon_2 equal 1   		# the epsilon parameter for the repulsive particles
variable	sigma_2 equal 0.5   		# initial sigma parameter for the central repulsive particle 
variable	sigma_2_max equal ${h}+5   	# maximum sigma parameter for the central repulsive particle 

variable	check_n_step equal 3		# how many steps to check the number of particles inside the cavity
variable    increase_sigma_step equal 50	# how many steps to change the sigma parameter

variable	N equal 108000 			# number of fluid particles

variable    self_name string "create_cavity.txt"
#---------------------------------------------------------------

# general settings
units		lj
atom_style	atomic
neighbor	0.5 bin	
neigh_modify 	every 50 delay 0 check no
timestep	0.00231832

#---------------------------------------------------------------

# read the dump file of the metastable liquid
lattice         fcc 1
region          box block 0 30 0 30 0 30 units box
create_box	2 box
create_atoms	1 random ${N} 45 box
read_dump	dump_start.txt 100000 x y z vx vy vz box yes replace yes #add yes
mass	1	1.0
pair_style	lj/cut  6.576
pair_coeff	1 1 1.0 1.0 6.576

#---------------------------------------------------------------

# set the coordinates of repulsive particles (use the calc_repulsive_pars.py script)
# set coordinates


# the ratio of the sigma parameter of the i-th particle to the sigma parameter of the central particle (use the calc_repulsive_pars.py script)
# set proportional coefficients


#---------------------------------------------------------------

# pre-cut small cavities to accommodate repulsive particles (use the calc_repulsive_pars.py script)
# set regions and delete
 

#-------------------------------------------------------------

# put repulsive particles into the system (use calc_repulsive_pars.py script)
# set adding repulsive atoms
 

#---------------------------------------------------------------

# to control the number of particles in the cavity

variable 	sphere1_center_x	equal 	lx/2
variable 	sphere1_center_y	equal 	ly/2-${R}+${h}
variable 	sphere1_center_z	equal 	lz/2
region 		sphere1 sphere ${sphere1_center_x} ${sphere1_center_y} ${sphere1_center_z} ${R} units box side in

variable 	sphere2_center_x	equal 	lx/2
variable 	sphere2_center_y	equal 	ly/2+${R}-${h}
variable 	sphere2_center_z	equal 	lz/2
region 		sphere2 sphere ${sphere2_center_x} ${sphere2_center_y} ${sphere2_center_z} ${R} units box side in

region 		cavity intersect 2 sphere1 sphere2
variable	n_in_cavity equal count(all,cavity)
#---------------------------------------------------------------

thermo		1
thermo_style 	custom step temp vol density v_n_in_cavity
reset_timestep  0

variable i loop 1000
variable count loop 1000

dump	all_dump all custom 150 dump_end.txt id type x y z vx vy vz

label start_loop_sigma     # the beginning of the cycle, in which the sigma changes
	
	# define a new value of sigma (no greater than sigma_2_max)
	variable temp_i equal ${sigma_2}+0.5*$i
	if "${temp_i} > ${sigma_2_max}" &
		then "variable new_sigma equal ${sigma_2_max}" & 
		else "variable new_sigma equal ${temp_i}"
	# set sigma for all repulsive particles
	
	# set all pair coefficients


	label start_loop_n # the beginning of the cycle, in which we check the number of particles in the cavity

		print "Now sigma is equal ${new_sigma}"	
		print "Now count is equal ${count}"			
			fix	1 all nvt temp ${T0} ${T0} 0.231832
			run	${check_n_step}
			unfix 	1
		next count
		if "${n_in_cavity} == ${n_min}" then "jump ${self_name} stop_loop_sigma"
		variable temp equal ${count}%${increase_sigma_step}
		if "${temp} != 0" then "jump ${self_name} start_loop_n" 
	next i
	jump ${self_name} start_loop_sigma

label stop_loop_sigma      # the end of the cycle, in which the sigma changes
undump all_dump

# write dump file
group type_repuls type != 1
delete_atoms group type_repuls
reset_timestep  0
fix	1 all nvt temp ${T0} ${T0} 0.231832
dump	all_dump all custom 1 dump_end.txt id type x y z vx vy vz
run	1
unfix 	1


#===============================================================
#=============<>     HAPPY END !!!      <>======================
#===============================================================



